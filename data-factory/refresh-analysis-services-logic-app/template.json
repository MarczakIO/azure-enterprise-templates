{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "LogicAppName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Logic App resource"
            }
        },
        "Location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Region of the Logic App resource"
            }
        }
    },
    "functions": [],
    "variables": {},
    "resources": [
        {
            "name": "[parameters('LogicAppName')]",
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "location": "[parameters('Location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/schemas/2016-06-01/Microsoft.Logic.json",
                    "actions": {
                        "Catch:_If_any_errors_ocurred": {
                            "actions": {
                                "Filter_array": {
                                    "inputs": {
                                        "from": "@result('Try:_Refresh_model')",
                                        "where": "@equals(item()['status'], 'Failed')"
                                    },
                                    "runAfter": {},
                                    "type": "Query"
                                },
                                "Respond_to_ADF_webhook_when_finished_-_FAILED_EXTERNAL_REASONS": {
                                    "inputs": {
                                        "body": {
                                            "Error": {
                                                "ErrorCode": "500",
                                                "Message": "@{join(body('Filter_array'),' | ')}"
                                            },
                                            "Output": {
                                                "ErrorMessages": "@body('Filter_array')",
                                                "Status": "Failed",
                                                "Workflow": "@workflow()"
                                            },
                                            "StatusCode": "500"
                                        },
                                        "method": "POST",
                                        "uri": "@triggerBody()?['callBackUri']"
                                    },
                                    "runAfter": {
                                        "Filter_array": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http"
                                }
                            },
                            "runAfter": {
                                "Try:_Refresh_model": [
                                    "Failed"
                                ]
                            },
                            "type": "Scope"
                        },
                        "Create_\"Refresh_Response\"_variable": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Refresh Message",
                                        "type": "string"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Create_\"Sync_Status\"_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Create_\"Refresh_Status\"_variable": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Refresh Status",
                                        "type": "string",
                                        "value": "notStarted"
                                    }
                                ]
                            },
                            "runAfter": {
                                "Respond_to_ADF_that_refresh_started": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Create_\"Sync_Status\"_variable": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Sync Status",
                                        "type": "integer",
                                        "value": -1
                                    }
                                ]
                            },
                            "runAfter": {
                                "Create_\"Refresh_Status\"_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Respond_to_ADF_that_refresh_started": {
                            "inputs": {
                                "statusCode": 200
                            },
                            "kind": "Http",
                            "runAfter": {},
                            "type": "Response"
                        },
                        "Try:_Refresh_model": {
                            "actions": {
                                "Condition:_Is_refresh_successful": {
                                    "actions": {
                                        "Condition:_Should_sync_replicas": {
                                            "actions": {
                                                "Request_AAS_Sync": {
                                                    "inputs": {
                                                        "authentication": {
                                                            "audience": "https://*.asazure.windows.net",
                                                            "type": "ManagedServiceIdentity"
                                                        },
                                                        "method": "POST",
                                                        "uri": "https://@{triggerBody()?['AAS Rollout Region']}.asazure.windows.net/servers/@{triggerBody()?['AAS Server Name']}/models/@{triggerBody()?['AAS Model Name']}/sync"
                                                    },
                                                    "operationOptions": "DisableAsyncPattern",
                                                    "runAfter": {},
                                                    "type": "Http"
                                                },
                                                "Respond_to_ADF_webhook_when_finished_-_SYNC_SUCCEEDED": {
                                                    "inputs": {
                                                        "body": {
                                                            "Output": {
                                                                "Status": "@{variables('Refresh Status')}",
                                                                "SyncStatusCode": "@variables('Sync Status')",
                                                                "Workflow": "@workflow()"
                                                            },
                                                            "StatusCode": "200"
                                                        },
                                                        "method": "POST",
                                                        "uri": "@triggerBody()?['callBackUri']"
                                                    },
                                                    "runAfter": {
                                                        "Until_sync_is_in_progress": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http"
                                                },
                                                "Until_sync_is_in_progress": {
                                                    "actions": {
                                                        "Delay_-_Wait_for_Sync": {
                                                            "inputs": {
                                                                "interval": {
                                                                    "count": 30,
                                                                    "unit": "Second"
                                                                }
                                                            },
                                                            "runAfter": {},
                                                            "type": "Wait"
                                                        },
                                                        "Get_Sync_Status": {
                                                            "inputs": {
                                                                "authentication": {
                                                                    "audience": "https://*.asazure.windows.net",
                                                                    "type": "ManagedServiceIdentity"
                                                                },
                                                                "method": "GET",
                                                                "uri": "@{outputs('Request_AAS_Sync')['headers']['Location']}"
                                                            },
                                                            "runAfter": {
                                                                "Delay_-_Wait_for_Sync": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Http"
                                                        },
                                                        "Set_\"Sync_Status\"_variable": {
                                                            "inputs": {
                                                                "name": "Sync Status",
                                                                "value": "@body('Get_Sync_Status')['syncstate']"
                                                            },
                                                            "runAfter": {
                                                                "Get_Sync_Status": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "SetVariable"
                                                        }
                                                    },
                                                    "expression": "@or(equals(variables('Sync Status'), 3),equals(variables('Sync Status'), 2))",
                                                    "limit": {
                                                        "count": 720,
                                                        "timeout": "PT1H"
                                                    },
                                                    "runAfter": {
                                                        "Request_AAS_Sync": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Until"
                                                }
                                            },
                                            "else": {
                                                "actions": {
                                                    "Respond_to_ADF_webhook_when_finished_-_REFRESH_SUCCEEDED": {
                                                        "inputs": {
                                                            "body": {
                                                                "Output": {
                                                                    "Status": "@{variables('Refresh Status')}",
                                                                    "Workflow": "@workflow()"
                                                                },
                                                                "StatusCode": "200"
                                                            },
                                                            "method": "POST",
                                                            "uri": "@triggerBody()?['callBackUri']"
                                                        },
                                                        "runAfter": {},
                                                        "type": "Http"
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@triggerBody()?['Wait For Sync']",
                                                            "@true"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "runAfter": {},
                                            "type": "If"
                                        }
                                    },
                                    "else": {
                                        "actions": {
                                            "Respond_to_ADF_webhook_when_finished_-_FAILED_STATUS": {
                                                "inputs": {
                                                    "body": {
                                                        "Error": {
                                                            "ErrorCode": "400",
                                                            "Message": "@{join(body('Get_AAS_Refresh_Status')?['messages'],' | ')}"
                                                        },
                                                        "Output": {
                                                            "ErrorMessages": "@body('Get_AAS_Refresh_Status')?['messages']",
                                                            "Status": "@{variables('Refresh Status')}",
                                                            "Workflow": "@workflow()"
                                                        },
                                                        "StatusCode": "400"
                                                    },
                                                    "method": "POST",
                                                    "uri": "@triggerBody()?['callBackUri']"
                                                },
                                                "runAfter": {},
                                                "type": "Http"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('Refresh Status')",
                                                    "succeeded"
                                                ]
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "Until": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Request_AAS_Refresh": {
                                    "inputs": {
                                        "authentication": {
                                            "audience": "https://*.asazure.windows.net",
                                            "type": "ManagedServiceIdentity"
                                        },
                                        "body": "@triggerBody()?['AAS Refresh Body']",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "method": "POST",
                                        "uri": "https://@{triggerBody()?['AAS Rollout Region']}.asazure.windows.net/servers/@{triggerBody()?['AAS Server Name']}/models/@{triggerBody()?['AAS Model Name']}/refreshes"
                                    },
                                    "operationOptions": "DisableAsyncPattern",
                                    "runAfter": {},
                                    "type": "Http"
                                },
                                "Until": {
                                    "actions": {
                                        "Delay_-_Wait_for_Refresh": {
                                            "inputs": {
                                                "interval": {
                                                    "count": 30,
                                                    "unit": "Second"
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Wait"
                                        },
                                        "Get_AAS_Refresh_Status": {
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "https://*.asazure.windows.net",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json"
                                                },
                                                "method": "GET",
                                                "uri": "@{outputs('Request_AAS_Refresh')['headers']?['Location']}"
                                            },
                                            "runAfter": {
                                                "Delay_-_Wait_for_Refresh": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http"
                                        },
                                        "Set_\"Refresh_Status\"_variable": {
                                            "inputs": {
                                                "name": "Refresh Status",
                                                "value": "@{body('Get_AAS_Refresh_Status')?['status']}"
                                            },
                                            "runAfter": {
                                                "Get_AAS_Refresh_Status": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable"
                                        }
                                    },
                                    "expression": "@not(or(equals(variables('Refresh Status'), 'inProgress'),equals(variables('Refresh Status'), 'notStarted')))",
                                    "limit": {
                                        "count": 720,
                                        "timeout": "PT12H"
                                    },
                                    "runAfter": {
                                        "Request_AAS_Refresh": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Until"
                                }
                            },
                            "runAfter": {
                                "Create_\"Refresh_Response\"_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        }
                    },
                    "contentVersion": "1.0.0.0",
                    "outputs": {},
                    "parameters": {},
                    "triggers": {
                        "manual": {
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "AAS Model Name": {
                                            "type": "string"
                                        },
                                        "AAS Refresh Body": {
                                            "type": "object"
                                        },
                                        "AAS Rollout Region": {
                                            "type": "string"
                                        },
                                        "AAS Server Name": {
                                            "type": "string"
                                        },
                                        "Wait For Sync": {
                                            "type": "boolean"
                                        },
                                        "callBackUri": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "kind": "Http",
                            "type": "Request"
                        }
                    }
                },
                "parameters": {}
            }
        }
    ],
    "outputs": {
        "IdentityPrinicpalId": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Logic/workflows', parameters('logicAppName')), '2019-05-01', 'Full').identity.principalId]"
        },
        "IdentityTenantId": {
            "type": "string",
            "value": "[subscription().tenantId]"
        },
        "LogicAppName": {
            "type": "string",
            "value": "[parameters('LogicAppName')]"
        }
    }
}